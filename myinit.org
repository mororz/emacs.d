#+AUTHOR: Andrew Moroz
#+TITLE: My emacs init file
#+STARTUP: overview
#+OPTIONS: num:nil toc:nil
#+LATEX_HEADER: \usepackage[utf8]{inputenc}

* Personal information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Andrew Moroz"
          user-mail-address "ndrew.moroz@gmail.com")
  #+END_SRC
* UI and basic behaviour
** I don't like seeing all these bars
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (when window-system
      (scroll-bar-mode -1))
  #+END_SRC

** Here's a room for playing with themes
  #+BEGIN_SRC emacs-lisp
    (use-package afternoon-theme
      :ensure t
      :config
      (load-theme 'afternoon t))
  #+END_SRC

** Default font and font size
  #+BEGIN_SRC emacs-lisp
    (set-default-font "Inconsolata 10")
  #+END_SRC

** Enable smooth scrolling
  #+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 100)
  #+END_SRC

** Highlight current line. It's nice, I like it
  #+BEGIN_SRC emacs-lisp
    (when window-system
      (global-hl-line-mode))
  #+END_SRC

** Show line numbers
  #+BEGIN_SRC emacs-lisp
    ;; (global-display-line-numbers-mode 1)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (setq display-line-numbers-mode 'relative)
  #+END_SRC

** Set cursor type
  #+BEGIN_SRC emacs-lisp
    (set-default 'cursor-type 'bar)
  #+END_SRC

** Transparency
  #+BEGIN_SRC emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
     (add-to-list 'default-frame-alist '(alpha . (85 . 80)))
  #+END_SRC

** Lock font wherever possible
  #+BEGIN_SRC emacs-lisp
    (global-font-lock-mode t)
  #+END_SRC

** Best thing in emacs.
  I love it very much, but it doesn't fit very nice
  when frame is split
  #+BEGIN_SRC emacs-lisp
       (use-package nyan-mode
         :ensure t
         :init (nyan-mode t))
  #+END_SRC

** Overwrite selected text
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode t)
  #+END_SRC

** Ask for confirmation when leaving emacs
  #+BEGIN_SRC emacs-lisp
    (setq confirm-kill-emacs 'y-or-n-p)
  #+END_SRC

** Change yes and no to y and n
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

** Show column number
  #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
  #+END_SRC

** Always show matching parens
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
    (setq show-paren-delay 0.0)
  #+END_SRC

** Change tabs with spaces
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+END_SRC

** Don't ask when killing buffer
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x k") 'kill-current-buffer)

    (defun kill-current-buffer ()
      "Kill the current buffer without prompting."
      (interactive)
      (kill-buffer (current-buffer)))
  #+END_SRC

** wttr for weather
  #+BEGIN_SRC emacs-lisp
    (use-package wttrin
      :ensure t
      :config
      (progn
        (setq wttrin-default-cities '("Kiev"))
        (setq wttrin-default-accept-language '("Accept-Language" . "en-US"))))
  #+END_SRC
  
** Find this file quickly

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "\e\ec") (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))
   #+END_SRC

** Change windosws size with nice keys

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-{") 'shrink-window-horizontally)
     (global-set-key (kbd "C-}") 'enlarge-window-horizontally)
     (global-set-key (kbd "C-M-{") 'shrink-window)
     (global-set-key (kbd "C-M-}") 'enlarge-window)
   #+END_SRC

** use utf-8 encoding
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
   #+END_SRC

** Backups

   Set backup directory
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

** Ranger
   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :ensure t)

     (setq ranger-preview-file t)

     (setq ranger-show-literal nil)

     (setq ranger-max-preview-size 100)
   #+END_SRC

   Use =ranger= instead of =dired=
   #+BEGIN_SRC emacs-lisp
     ;; (global-set-key (kbd "C-x d") 'ranger)
   #+END_SRC

** Show icons wherever possible
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC

** Dired
   #+BEGIN_SRC emacs-lisp
     (setq dired-dwim-target t)
     ;; Hide details by default
     (add-hook 'dired-mode-hook 'dired-hide-details-mode)

     (use-package all-the-icons-dired
       :ensure t
       :after all-the-icons
       :hook (dired-mode . all-the-icons-dired-mode))

     ;; fix regex
     (use-package pcre2el
       :ensure t
       :config (pcre-mode))
   #+END_SRC

** Doom modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :defer t
       :hook (after-init . doom-modeline-init))
   #+END_SRC

** load path
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/code/")
   #+END_SRC

** prettify symbols
   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode +1)
   #+END_SRC

* General packages
** =try=

   Nice package to try other packages without installing them
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)   
   #+END_SRC

** =which-key=

   Show tips for keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** =ibuffer=

   Better buffer list
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC

** =ace-window=

   Nice package for better changing windows
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
         (global-set-key [remap other-window] 'ace-window)
         (custom-set-faces
          '(aw-leading-char-face
            ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+END_SRC

** =counsel= and =swiper=

   I'll stick with these for now. I pretty much like it
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
        :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))
     (use-package swiper
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume)
         (global-set-key (kbd "M-x") 'counsel-M-x)
         (global-set-key (kbd "C-x C-f") 'counsel-find-file)
         (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         (global-set-key (kbd "<f1> l") 'counsel-find-library)
         (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         (global-set-key (kbd "C-c g") 'counsel-git)
         (global-set-key (kbd "C-c j") 'counsel-git-grep)
         (global-set-key (kbd "C-c k") 'counsel-ag)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
   #+END_SRC

** =avy=

   Nice package to navigate like in qutebrowser
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC

** =auto-complete=

   For every programming mode I'll probably replace this
   with smth more advanced
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t)
       ;; :init
       ;; (progn
         ;; (ac-config-default)))
         ;; (global-auto-complete-mode t)


   #+END_SRC

** =smartparens=

   This helps me keep parens balanced
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t)
   #+END_SRC

** =company=
   
   Need company for =elpy=
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t)
   #+END_SRC

** =yasnippet=

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC

** =undo-tree=
   
   Another way to undo
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC

** =beacon=

   Helps finding cursor
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t 
       :config
       (beacon-mode 1))
   #+END_SRC

** =expand-region=

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC

** =multi-term=
   #+BEGIN_SRC emacs-lisp
     (use-package multi-term
       :ensure t)
     (global-set-key (kbd "C-c t") 'multi-term)
   #+END_SRC

** =htmlize=
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** =projectile=
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t 
       :config
       (projectile-global-mode)
       (setq projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-mode))

     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

     (use-package project-explorer
       :ensure t
       :config (setq pe/width 28))
   #+END_SRC

** =magit=
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC

** =mode-icons=
   #+BEGIN_SRC emacs-lisp
     (use-package mode-icons
       :ensure t
       :config (mode-icons-mode))
   #+END_SRC

** =dashboard=
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook))

     ;; use forune utility for greetings
     (setq dashboard-banner-logo-title (shell-command-to-string "fortune -a"))

     (setq dashboard-items '((projects . 5)))

   #+END_SRC

** =rainbow-delimiters=
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t)
   #+END_SRC

** =evil-mode=
   
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
     ;;  :config (evil-mode 1)
       )
   #+END_SRC

* Org mode

  I love =org-mode=

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

  Set up some defaults
  #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(org-directory "~/org"))
  #+END_SRC

  Open pdf files in *zathura*
  #+BEGIN_SRC emacs-lisp
    (setq org-file-apps
          (append '(("\\.pdf\\'" . "zathura %s"))
                  org-file-apps))
  #+END_SRC

  Open agenda with "C-c a"
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-ca" 'org-agenda)
  #+END_SRC

  Set up auto completion for =org-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package org-ac
      :ensure t
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)))
  #+END_SRC

  Set keys
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cb" 'org-switchb)
  #+END_SRC

  Open editing buffer in the same window
  #+BEGIN_SRC emacs-lisp
    (setq org-src-window-setup 'current-window)
  #+END_SRC

  Change ellipsis
  #+BEGIN_SRC emacs-lisp
    ;; (setq org-ellipsis "...")
  #+END_SRC

  Python
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
  #+END_SRC

  Scheme
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
         'org-babel-load-languages
         '((scheme . t)))
  #+END_SRC

  Unicode
  #+BEGIN_SRC emacs-lisp
    (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
  #+END_SRC

  Nice code highlightning in pdfs
  #+BEGIN_SRC emacs-lisp
    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)

    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  #+END_SRC

* Proramming
** Python

   I use =elpy= for python development
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config (elpy-enable))
   #+END_SRC

   And some basic configuration
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook #'smartparens-mode)

     (setq python-indent-offset 4)

     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "-i --simple-prompt")

     (when (require 'flycheck nil t)
       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
       (add-hook 'elpy-mode-hook 'flycheck-mode))

     (use-package py-autopep8
       :ensure t
       :config
       (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

     (add-hook 'inferior-python-mode-hook 'auto-complete-mode-hook)

     ;; use ml env by default
     (pyvenv-workon 'ml)
   #+END_SRC

   Jupyter notebooks for emacs
   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :ensure t)
   #+END_SRC

** Lisp
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t)

     (add-hook 'scheme-mode-hook #'paredit-mode)
     (add-hook 'emacs-lisp-mode-hook #'paredit-mode)

     (add-hook 'scheme-mode-hook #'rainbow-delimiters-mode)
     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)

     ;; use geiser for Scheme
     (use-package ac-geiser
       :ensure t)

     ;; (add-hook 'geiser-mode-hook 'ac-geiser-setup)
     ;; (add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
     ;; (eval-after-load "auto-complete"
     ;;   '(add-to-list 'ac-modes 'geiser-repl-mode))

     (use-package geiser
       :ensure t)

     (setq geiser-active-implementations '(guile))

     (add-hook 'geiser-repl-mode-hook #'paredit-mode)
     (add-hook 'geiser-repl-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC

** R

   Use ESS for R development
   #+BEGIN_SRC emacs-lisp
     (use-package ess
       :ensure t)
   #+END_SRC

   Basic configuration for editing
   #+BEGIN_SRC emacs-lisp
     (add-hook 'ess-mode-hook #'auto-complete-mode)
     (add-hook 'ess-mode-hook #'smartparens-mode)
     (add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
     
     (add-hook 'inferior-ess-mode-hook #'auto-complete-mode)
     (add-hook 'inferior-ess-mode-hook #'smartparens-mode)
     (add-hook 'inferior-ess-mode-hook #'rainbow-delimiters-mode)

     (defun myindent-ess-hook ()
       (setq ess-indent-level 2))
     (add-hook 'ess-mode-hook 'myindent-ess-hook)
   #+END_SRC

** C

   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t)

     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

     (setq-default c-basic-offset 8 c-default-style "linux")

     (add-hook 'c-mode-hook #'auto-complete-mode)
     (add-hook 'c-mode-hook #'smartparens-mode)
     (add-hook 'c-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC

* Other bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "\e\es") (lambda () (interactive) (find-file "~/org/ds.org")))
    (global-set-key (kbd "<f8>") 'project-explorer-toggle)
    (global-set-key (kbd "M-;") 'comment-line)
  #+END_SRC
