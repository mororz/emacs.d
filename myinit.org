#+AUTHOR: Andrew Moroz
#+TITLE: My emacs init file
#+STARTUP: overview
#+OPTIONS: num:nil toc:nil
#+LATEX_HEADER: \usepackage[utf8]{inputenc}

* Initial settings

  I don't know why. But it fixes bugs with company in pascal-mode
  #+BEGIN_SRC emacs-lisp
    (require 'cl)
  #+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Andrew Moroz"
	user-mail-address "ndrew.moroz@gmail.com")
#+END_SRC

* Package management

Use =use-package=

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* UI

** Bars and scrolls

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-default-font "Source Code Pro 11")
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package afternoon-theme
    :ensure t
    :config
    (load-theme 'afternoon t))

#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** Show line numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

** Cursor type

#+BEGIN_SRC emacs-lisp
  (set-default 'cursor-type 'bar)
#+END_SRC

** Font locking

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

** Display column numbers

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** Show matching parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

** Doom modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :defer t
    :hook (after-init . doom-modeline-init))
#+END_SRC

** Use icons

Don't forget to install necessary icons. [[https://github.com/domtronn/all-the-icons.el][Details]]

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

** Use =beacon= to find cursor

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t 
    :config
    (beacon-mode 1))
#+END_SRC

** Use icons in =Dired= mode

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** Use =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t)
#+END_SRC

* Behaviour

** Overwrite selected text

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** Ask for confirmation when leaving emacs

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Change yes-no to y-n

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Change tabs with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

#+END_SRC

** Always kill current buffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  (defun kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

** Always use utf8 encoding

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

** Hide details in =Dired=

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
  ;; Hide details by default
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

** Revert changed buffers

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Nice undoing with =undo-tree=

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

** Use =expand-region=

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** Change windows with =ace-window=

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

** Scroll like normal programs scroll

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Show tips for key-bindings with =which-key=

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

** Keep parens balanced

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t)
#+END_SRC

** Use =ibuffer=

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

** Use =yasnippet=

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :ensure t)

     (yas-global-mode 1)
   #+END_SRC

** Use =ivy=

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
        :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))
     (use-package swiper
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume)
         (global-set-key (kbd "M-x") 'counsel-M-x)
         (global-set-key (kbd "C-x C-f") 'counsel-find-file)
         (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         (global-set-key (kbd "<f1> l") 'counsel-find-library)
         (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         (global-set-key (kbd "C-c g") 'counsel-git)
         (global-set-key (kbd "C-c j") 'counsel-git-grep)
         (global-set-key (kbd "C-c k") 'counsel-ag)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
   #+END_SRC

** Don't make backups

   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
   #+END_SRC

** =multi-term=

   #+BEGIN_SRC emacs-lisp
     (use-package multi-term
       :ensure t)
   #+END_SRC

** =flycheck=

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))
   #+END_SRC

* Programming

** Use =company-mode= for some major modes

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t)

  (use-package company-quickhelp
    :ensure t)
#+END_SRC

** Use =magit=

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Emacs lisp

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)

  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook #'company-mode)
  (add-hook 'emacs-lisp-mode-hook #'company-quickhelp-mode)
#+END_SRC

** Pascal

   #+BEGIN_SRC emacs-lisp
     (add-hook 'pascal-mode-hook #'smartparens-mode)
     (add-hook 'pascal-mode-hook #'rainbow-delimiters-mode)
     (setq pascal-indent-level 4) ; make 4 as standard indent.
     (add-hook 'pascal-mode-hook #'company-mode)
   #+END_SRC

** NASM

   #+BEGIN_SRC emacs-lisp
     (use-package nasm-mode
       :ensure t
       :config
       (add-hook 'asm-mode-hook 'nasm-mode))

     (use-package x86-lookup
       :ensure t
       :config
       (setq  x86-lookup-pdf "~/Books/programming/64-iA32-Instruction-set-reference-vol2.pdf"))
   #+END_SRC

** C

   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t
       :config
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

     (use-package company-irony
       :ensure t
       :config
       (add-to-list 'company-backends 'company-irony)
       (add-hook 'irony-mode-hook #'company-irony))

     (use-package irony-eldoc
       :ensure t
       :config
       (add-hook 'irony-mode-hook #'irony-eldoc))

     (use-package flycheck-irony
       :ensure t
       :config
       (eval-after-load 'flycheck
         '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))

     (use-package company-c-headers
       :ensure t
       :config
       (add-to-list 'company-backends 'company-c-headers))

     (setq-default c-basic-offset 4)

     (add-hook 'irony-mode-hook #'smartparens-mode)
     (add-hook 'irony-mode-hook #'rainbow-delimiters-mode)
     (add-hook 'irony-mode-hook #'company-mode)
     (add-hook 'irony-mode-hook #'company-quickhelp-mode)
   #+END_SRC

* =org-mode=

** Use =org-bullets=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f5>") 'compile)
  #+END_SRC
